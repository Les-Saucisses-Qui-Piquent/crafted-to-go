generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [address_standardizer, fuzzystrmatch, postgis, postgis_raster, postgis_sfcgal, postgis_tiger_geocoder, postgis_topology]
}

enum UserRole {
  client
  brewer
  admin
}

model address {
  id          String                    @id @default(uuid()) @db.Uuid
  line_1      String
  line_2      String?
  postal_code String
  city        String
  country     String
  GPS         Unsupported("geography")?
  updated_at  DateTime                  @default(now()) @db.Timestamp(3)
  created_at  DateTime                  @default(now()) @db.Timestamp(3)

  //Relations
  brewery_owner_fk brewery_owner[]
  user_detail_fk   user_detail[]
  brewery_fk       brewery[]
}

model beer {
  id             String   @id @default(uuid()) @db.Uuid
  name           String
  image          String?
  beer_color_id  String   @db.Uuid
  brewery_id     String   @db.Uuid
  abv_rate       Float
  ibu_rate       Float
  quantity       Int
  price          Float
  beer_style_ids String   @db.Uuid
  is_public      Boolean  @default(false)
  created_at     DateTime @default(now()) @db.Timestamp(3)
  updated_at     DateTime @default(now()) @db.Timestamp(3)

  //Relations
  style_fk         beer_style      @relation(fields: [beer_style_ids], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "beer_style")
  beer_color_fk    beer_color      @relation(fields: [beer_color_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "beer_beer_color_id_foreign")
  brewery_fk       brewery         @relation(fields: [brewery_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "beer_brewery_id_foreign")
  favorite_beer_fk favorite_beer[]
  order_detail_fk  order_detail[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model beer_color {
  id          String @id @default(uuid()) @db.Uuid
  label       String @db.VarChar(255)
  beer_levels Int[]  @db.Integer

  //Relations
  beer_fk        beer[]
  user_detail_fk user_detail[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model beer_style {
  id          String @id @default(uuid()) @db.Uuid
  label       String @db.VarChar(255)
  beer_levels Int[]  @db.Integer

  //Relations
  beer_fk        beer[]
  user_detail_fk user_detail[]
}

model brewery {
  id               String   @id @default(uuid()) @db.Uuid
  name             String
  RIB              String
  siren            String
  address_id       String   @db.Uuid
  brewery_owner_id String   @db.Uuid
  created_at       DateTime @default(now()) @db.Timestamp(3)
  updated_at       DateTime @default(now()) @db.Timestamp(3)

  //Relations
  address_fk              address            @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "brewery_address_id_foreign")
  user_fk                 user               @relation(fields: [brewery_owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "brewery_user_id_foreign")
  beer_fk                 beer[]
  brewery_detail_fk       brewery_detail[]
  favorite_brewery_fk     favorite_brewery[]
  order_fk                order[]
  brewery_owner           brewery_owner?     @relation(fields: [brewery_ownerUser_id, brewery_ownerAddress_id], references: [user_id, address_id])
  brewery_ownerUser_id    String?            @db.Uuid
  brewery_ownerAddress_id String?            @db.Uuid
}

model brewery_detail {
  id            String   @id @default(uuid()) @db.Uuid
  brewery_id    String   @db.Uuid
  has_taproom   Boolean  @default(false)
  image         String?
  logo          String?
  description   String
  social_links  String[]
  taproom_hours Json?
  opening_hours Json
  phone_number  String
  email         String
  created_at    DateTime @default(now()) @db.Timestamp(3)
  updated_at    DateTime @default(now()) @db.Timestamp(3)

  //Relations
  brewery_fk brewery @relation(fields: [brewery_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "brewery_detail_brewery_id_foreign")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model brewery_owner {
  user_id    String    @db.Uuid
  address_id String    @db.Uuid

  //Relations
  @@unique([user_id, address_id])
  brewery_fk brewery[]
  user_fk    user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "brewery_owner_user_id_foreign")
  address_fk address   @relation(fields: [address_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "brewery_owner_address_id_foreign")
}

model favorite_beer {
  id       String   @id @default(uuid()) @db.Uuid
  beer_id  String   @db.Uuid
  user_id  String   @db.Uuid
  liked_at DateTime @db.Timestamp(3)

  //Relations
  beer_fk beer @relation(fields: [beer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favorite_beer_beer_id_foreign")
  user_fk user @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favorite_beer_user_id_foreign")
}

model favorite_brewery {
  id         String   @id @default(uuid()) @db.Uuid
  brewery_id String   @db.Uuid
  user_id    String   @db.Uuid
  liked_at   DateTime @db.Timestamp(3)

  //Relations
  brewery_fk brewery @relation(fields: [brewery_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favorite_brewery_brewery_id_foreign")
  user_fk    user    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favorite_brewery_user_id_foreign")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model order {
  id             String   @id @default(uuid()) @db.Uuid
  user_id        String   @db.Uuid
  brewery_id     String   @db.Uuid
  final_price    Float
  status         String   @db.VarChar(255)
  pickup_day     DateTime @db.Date
  pickup_time    String
  payment_method String?
  created_at     DateTime @default(now()) @db.Timestamp(3)
  updated_at     DateTime @default(now()) @db.Timestamp(3)

  //Relations
  brewery_fk      brewery        @relation(fields: [brewery_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_brewery_id_foreign")
  user_fk         user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_user_id_foreign")
  order_detail_fk order_detail[]
}

model order_detail {
  id         String   @id @default(uuid()) @db.Uuid
  order_id   String   @db.Uuid
  beer_id    String   @db.Uuid
  quantity   Int
  price      Float
  is_ready   Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @default(now()) @db.Timestamp(3)

  //Relations
  beer_fk  beer  @relation(fields: [beer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_detail_beer_id_foreign")
  order_fk order @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_detail_order_id_foreign")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model test {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  created_at DateTime @default(now()) @db.Timestamp(3)
  updated_at DateTime @default(now()) @db.Timestamp(3)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model user {
  id           String   @id @default(uuid()) @db.Uuid
  first_name   String
  last_name    String
  birth_date   DateTime @db.Date
  email        String   @unique
  phone_number String
  password     String
  created_at   DateTime @default(now()) @db.Timestamp(3)
  updated_at   DateTime @default(now()) @db.Timestamp(3)
  role         UserRole @default(client)

  //Relations
  favorite_beer_fk    favorite_beer[]
  favorite_brewery_fk favorite_brewery[]
  order_fk            order[]
  user_detail_fk      user_detail[]
  brewery             brewery[]
  brewery_owner       brewery_owner[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model user_detail {
  id             String   @id @default(uuid()) @db.Uuid
  user_id        String   @db.Uuid
  image          String
  color_ids      String[] @db.Uuid
  style_ids      String[] @db.Uuid
  beer_level     Int      @db.Integer
  address_id     String   @db.Uuid
  payment_method String?
  created_at     DateTime @default(now()) @db.Timestamp(3)
  updated_at     DateTime @default(now()) @db.Timestamp(3)

  //Relations
  color_ids_fk beer_color[]
  style_ids_fk beer_style[]
  address_fk   address      @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_detail_address_id_foreign")
  user_fk      user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_detail_user_id_foreign")
}
