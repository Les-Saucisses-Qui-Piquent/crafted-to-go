generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [address_standardizer, fuzzystrmatch, postgis, postgis_raster, postgis_sfcgal, postgis_tiger_geocoder, postgis_topology]
}

model address {
  id            String                    @id @default(uuid()) @db.Uuid
  line_1        String
  line_2        String?
  postal_code   Int
  city          String
  country       String
  GPS           Unsupported("geography")?
  updated_at    DateTime                  @default(now())
  created_at    DateTime                  @default(now())
  brewery       brewery[]
  brewery_owner brewery_owner[]
  user_detail   user_detail[]
}

model beer {
  id             String          @id @default(uuid()) @db.Uuid
  name           String
  image          String?
  beer_color_id  String          @db.Uuid
  brewery_id     String          @db.Uuid
  abv_rate       Float
  ibu_rate       Float
  quantity       Int
  price          Float
  is_public      Boolean         @default(false)
  created_at     DateTime        @default(now())
  updated_at     DateTime        @default(now())
  beer_style_ids String          @db.Uuid
  beer_color     beer_color      @relation(fields: [beer_color_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "beer_beer_color_id_foreign")
  brewery        brewery         @relation(fields: [brewery_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "beer_brewery_id_foreign")
  beer_style     beer_style      @relation(fields: [beer_style_ids], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "beer_style")
  favorite_beer  favorite_beer[]
  order_detail   order_detail[]
}

model beer_color {
  id          String        @id @default(uuid()) @db.Uuid
  label       String        @db.VarChar(255)
  beer_levels String[]      @db.VarChar(255)
  beer        beer[]
  user_detail user_detail[] @relation("beer_colorTouser_detail")
}

model beer_style {
  id          String        @id @default(uuid()) @db.Uuid
  label       String        @db.VarChar(255)
  beer_level  String[]      @db.VarChar(255)
  beer        beer[]
  user_detail user_detail[] @relation("beer_styleTouser_detail")
}

model brewery {
  id               String             @id @default(uuid()) @db.Uuid
  name             String
  RIB              String
  siren            String
  address_id       String             @db.Uuid
  brewery_owner_id String             @db.Uuid
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now())
  beer             beer[]
  address          address            @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "brewery_address_id_foreign")
  brewery_owner    brewery_owner      @relation(fields: [brewery_owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "brewery_brewery_owner_id_foreign")
  brewery_detail   brewery_detail[]
  favorite_brewery favorite_brewery[]
  order            order[]
}

model brewery_detail {
  id            String   @id @default(uuid()) @db.Uuid
  brewery_id    String   @db.Uuid
  has_taproom   Boolean  @default(false)
  image         String
  logo          String
  description   String
  social_link   String
  taproom_hours String?
  opening_hours String
  phone_number  String
  email         String
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  brewery       brewery  @relation(fields: [brewery_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "brewery_detail_brewery_id_foreign")
}

model brewery_owner {
  id           String    @id @default(uuid()) @db.Uuid
  first_name   String
  last_name    String
  address_id   String    @db.Uuid
  birth_date   DateTime  @db.Date
  phone_number String
  email        String
  password     String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  role         UserRole  @default(brewer)
  brewery      brewery[]
  address      address   @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "brewery_owner_address_id_foreign")
}

model favorite_beer {
  id       String   @id @default(uuid()) @db.Uuid
  beer_id  String   @db.Uuid
  user_id  String   @db.Uuid
  liked_at DateTime
  beer     beer     @relation(fields: [beer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favorite_beer_beer_id_foreign")
  user     user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favorite_beer_user_id_foreign")
}

model favorite_brewery {
  id         String   @id @default(uuid()) @db.Uuid
  brewery_id String   @db.Uuid
  user_id    String   @db.Uuid
  liked_at   DateTime
  brewery    brewery  @relation(fields: [brewery_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favorite_brewery_brewery_id_foreign")
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favorite_brewery_user_id_foreign")
}

model order {
  id             String         @id @default(uuid()) @db.Uuid
  user_id        String         @db.Uuid
  brewery_id     String         @db.Uuid
  final_price    Float
  status         String         @db.VarChar(255)
  pickup_day     DateTime       @db.Date
  pickup_time    String
  created_at     DateTime       @default(now())
  updated_at     DateTime       @default(now())
  payment_method String?
  brewery        brewery        @relation(fields: [brewery_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_brewery_id_foreign")
  user           user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_user_id_foreign")
  order_detail   order_detail[]
}

model order_detail {
  id         String   @id @default(uuid()) @db.Uuid
  order_id   String   @db.Uuid
  beer_id    String   @db.Uuid
  quantity   Int
  price      Float
  is_ready   Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  beer       beer     @relation(fields: [beer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_detail_beer_id_foreign")
  order      order    @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_detail_order_id_foreign")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model test {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model user {
  id               String             @id @default(uuid()) @db.Uuid
  first_name       String
  last_name        String
  birth_date       DateTime           @db.Date
  email            String             @unique
  phone_number     String
  password         String
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now())
  role             UserRole           @default(client)
  favorite_beer    favorite_beer[]
  favorite_brewery favorite_brewery[]
  order            order[]
  user_detail      user_detail[]
}

model user_detail {
  id             String       @id @default(uuid()) @db.Uuid
  user_id        String       @db.Uuid
  image          String
  beer_level     String       @db.VarChar(255)
  address_id     String       @db.Uuid
  created_at     DateTime     @default(now())
  updated_at     DateTime     @default(now())
  color_ids      String[]     @db.Uuid
  style_ids      String[]     @db.Uuid
  payment_method String?
  address        address      @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_detail_address_id_foreign")
  user           user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_detail_user_id_foreign")
  beer_color     beer_color[] @relation("beer_colorTouser_detail")
  beer_style     beer_style[] @relation("beer_styleTouser_detail")
}

enum UserRole {
  client
  brewer
  admin
}
